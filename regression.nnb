{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "# Regression"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Import Tensorflowjs"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "var tf = require(\"@tensorflow/tfjs-node\");\r\n\r\ntf.version;"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stderr",
                            "value": [
                                "2022-01-22 21:11:03.622984: I tensorflow/core/platform/cpu_feature_guard.cc:151] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2\r",
                                "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\r",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "{",
                                "  \u001b[32m'tfjs-core'\u001b[39m: \u001b[32m'3.13.0'\u001b[39m,",
                                "  \u001b[32m'tfjs-backend-cpu'\u001b[39m: \u001b[32m'3.13.0'\u001b[39m,",
                                "  \u001b[32m'tfjs-backend-webgl'\u001b[39m: \u001b[32m'3.13.0'\u001b[39m,",
                                "  \u001b[32m'tfjs-data'\u001b[39m: \u001b[32m'3.13.0'\u001b[39m,",
                                "  \u001b[32m'tfjs-layers'\u001b[39m: \u001b[32m'3.13.0'\u001b[39m,",
                                "  \u001b[32m'tfjs-converter'\u001b[39m: \u001b[32m'3.13.0'\u001b[39m,",
                                "  tfjs: \u001b[32m'3.13.0'\u001b[39m,",
                                "  \u001b[32m'tfjs-node'\u001b[39m: \u001b[32m'3.13.0'\u001b[39m",
                                "}"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "# Dataset"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Load Dataset"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const data = await tf.data.csv(\r\n  \"https://raw.githubusercontent.com/stedy/Machine-Learning-with-R-datasets/master/insurance.csv\"\r\n);"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Show Original Dataset"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const { from } = require(\"arquero\");\r\n\r\nfrom(await data.take(5).toArray())"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><table><thead><tr><th style=\"text-align: right;\">age</th><th style=\"text-align: left;\">sex</th><th style=\"text-align: right;\">bmi</th><th style=\"text-align: right;\">children</th><th style=\"text-align: left;\">smoker</th><th style=\"text-align: left;\">region</th><th style=\"text-align: right;\">charges</th></tr></thead><tbody><tr><td style=\"text-align: right;\">19</td><td style=\"text-align: left;\">female</td><td style=\"text-align: right;\">27.900</td><td style=\"text-align: right;\">0</td><td style=\"text-align: left;\">yes</td><td style=\"text-align: left;\">southwest</td><td style=\"text-align: right;\">16884.92400</td></tr><tr><td style=\"text-align: right;\">18</td><td style=\"text-align: left;\">male</td><td style=\"text-align: right;\">33.770</td><td style=\"text-align: right;\">1</td><td style=\"text-align: left;\">no</td><td style=\"text-align: left;\">southeast</td><td style=\"text-align: right;\">1725.55230</td></tr><tr><td style=\"text-align: right;\">28</td><td style=\"text-align: left;\">male</td><td style=\"text-align: right;\">33.000</td><td style=\"text-align: right;\">3</td><td style=\"text-align: left;\">no</td><td style=\"text-align: left;\">southeast</td><td style=\"text-align: right;\">4449.46200</td></tr><tr><td style=\"text-align: right;\">33</td><td style=\"text-align: left;\">male</td><td style=\"text-align: right;\">22.705</td><td style=\"text-align: right;\">0</td><td style=\"text-align: left;\">no</td><td style=\"text-align: left;\">northwest</td><td style=\"text-align: right;\">21984.47061</td></tr><tr><td style=\"text-align: right;\">32</td><td style=\"text-align: left;\">male</td><td style=\"text-align: right;\">28.880</td><td style=\"text-align: right;\">0</td><td style=\"text-align: left;\">no</td><td style=\"text-align: left;\">northwest</td><td style=\"text-align: right;\">3866.85520</td></tr></tbody></table>"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### One-Hot Encoding"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const { oneHot } = require('./util/oneHot');\r\nconst oneHotData = oneHot(await data.toArray(), ['sex', 'smoker', 'region']);\r\nfrom(oneHotData.slice(0,5))"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><table><thead><tr><th style=\"text-align: right;\">age</th><th style=\"text-align: right;\">bmi</th><th style=\"text-align: right;\">children</th><th style=\"text-align: right;\">charges</th><th style=\"text-align: right;\">sex_female</th><th style=\"text-align: right;\">sex_male</th><th style=\"text-align: right;\">smoker_yes</th><th style=\"text-align: right;\">smoker_no</th><th style=\"text-align: right;\">region_southwest</th><th style=\"text-align: right;\">region_southeast</th><th style=\"text-align: right;\">region_northwest</th><th style=\"text-align: right;\">region_northeast</th></tr></thead><tbody><tr><td style=\"text-align: right;\">19</td><td style=\"text-align: right;\">27.900</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">16884.92400</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">18</td><td style=\"text-align: right;\">33.770</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">1725.55230</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">28</td><td style=\"text-align: right;\">33.000</td><td style=\"text-align: right;\">3</td><td style=\"text-align: right;\">4449.46200</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">33</td><td style=\"text-align: right;\">22.705</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">21984.47061</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">32</td><td style=\"text-align: right;\">28.880</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">3866.85520</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td></tr></tbody></table>"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "const { getNormalizedMap, normalize } = require(\"./util/normalize\");\r\nconst columnsToNormalize = ['bmi', 'age', 'children', 'charges'];\r\nconst normalizedMap = getNormalizedMap(oneHotData, columnsToNormalize);\r\nconst prepData = normalize(oneHotData, columnsToNormalize, normalizedMap);\r\nfrom(prepData.slice(0, 5));\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><table><thead><tr><th style=\"text-align: right;\">age</th><th style=\"text-align: right;\">bmi</th><th style=\"text-align: right;\">children</th><th style=\"text-align: right;\">charges</th><th style=\"text-align: right;\">sex_female</th><th style=\"text-align: right;\">sex_male</th><th style=\"text-align: right;\">smoker_yes</th><th style=\"text-align: right;\">smoker_no</th><th style=\"text-align: right;\">region_southwest</th><th style=\"text-align: right;\">region_southeast</th><th style=\"text-align: right;\">region_northwest</th><th style=\"text-align: right;\">region_northeast</th></tr></thead><tbody><tr><td style=\"text-align: right;\">0.021739</td><td style=\"text-align: right;\">0.321227</td><td style=\"text-align: right;\">0.0</td><td style=\"text-align: right;\">0.251611</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">0.000000</td><td style=\"text-align: right;\">0.479150</td><td style=\"text-align: right;\">0.2</td><td style=\"text-align: right;\">0.009636</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">0.217391</td><td style=\"text-align: right;\">0.458434</td><td style=\"text-align: right;\">0.6</td><td style=\"text-align: right;\">0.053115</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">0.326087</td><td style=\"text-align: right;\">0.181464</td><td style=\"text-align: right;\">0.0</td><td style=\"text-align: right;\">0.333010</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">0.304348</td><td style=\"text-align: right;\">0.347592</td><td style=\"text-align: right;\">0.0</td><td style=\"text-align: right;\">0.043816</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td></tr></tbody></table>"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Prepare dataset"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const xsDataset = prepData.map((row) => {\r\n  const values = Object.values(row);\r\n  const xs = values.slice(0, -1);\r\n  return xs;\r\n});\r\n\r\nfrom(xsDataset.slice(0, 5));\r\n// xsDataset.slice(0,5)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><table><thead><tr><th style=\"text-align: right;\">0</th><th style=\"text-align: right;\">1</th><th style=\"text-align: right;\">2</th><th style=\"text-align: right;\">3</th><th style=\"text-align: right;\">4</th><th style=\"text-align: right;\">5</th><th style=\"text-align: right;\">6</th><th style=\"text-align: right;\">7</th><th style=\"text-align: right;\">8</th><th style=\"text-align: right;\">9</th><th style=\"text-align: right;\">10</th></tr></thead><tbody><tr><td style=\"text-align: right;\">0.021739</td><td style=\"text-align: right;\">0.321227</td><td style=\"text-align: right;\">0.0</td><td style=\"text-align: right;\">0.251611</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">0.000000</td><td style=\"text-align: right;\">0.479150</td><td style=\"text-align: right;\">0.2</td><td style=\"text-align: right;\">0.009636</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">0.217391</td><td style=\"text-align: right;\">0.458434</td><td style=\"text-align: right;\">0.6</td><td style=\"text-align: right;\">0.053115</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">0.326087</td><td style=\"text-align: right;\">0.181464</td><td style=\"text-align: right;\">0.0</td><td style=\"text-align: right;\">0.333010</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td></tr><tr><td style=\"text-align: right;\">0.304348</td><td style=\"text-align: right;\">0.347592</td><td style=\"text-align: right;\">0.0</td><td style=\"text-align: right;\">0.043816</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td></tr></tbody></table>"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "const ysDataset = prepData.map(({charges}) => charges);\r\n\r\nysDataset.slice(0,5)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[33m0.25161075660777127\u001b[39m,",
                                "  \u001b[33m0.009635951037912947\u001b[39m,",
                                "  \u001b[33m0.05311516199012881\u001b[39m,",
                                "  \u001b[33m0.3330100272285438\u001b[39m,",
                                "  \u001b[33m0.04381555710256758\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Shuffle Dataset"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "tf.util.shuffleCombo(xsDataset, ysDataset);\r\nfrom(xsDataset.slice(0,5))"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><table><thead><tr><th style=\"text-align: right;\">0</th><th style=\"text-align: right;\">1</th><th style=\"text-align: right;\">2</th><th style=\"text-align: right;\">3</th><th style=\"text-align: right;\">4</th><th style=\"text-align: right;\">5</th><th style=\"text-align: right;\">6</th><th style=\"text-align: right;\">7</th><th style=\"text-align: right;\">8</th><th style=\"text-align: right;\">9</th><th style=\"text-align: right;\">10</th></tr></thead><tbody><tr><td style=\"text-align: right;\">0.021739</td><td style=\"text-align: right;\">0.372343</td><td style=\"text-align: right;\">0.0</td><td style=\"text-align: right;\">0.009938</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">0.934783</td><td style=\"text-align: right;\">0.541835</td><td style=\"text-align: right;\">0.6</td><td style=\"text-align: right;\">0.428093</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">0.956522</td><td style=\"text-align: right;\">0.431934</td><td style=\"text-align: right;\">0.0</td><td style=\"text-align: right;\">0.711722</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">0.956522</td><td style=\"text-align: right;\">0.288808</td><td style=\"text-align: right;\">0.0</td><td style=\"text-align: right;\">0.430648</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">1.000000</td><td style=\"text-align: right;\">0.457493</td><td style=\"text-align: right;\">0.0</td><td style=\"text-align: right;\">0.216618</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td></tr></tbody></table>"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "ysDataset.slice(0,5)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[33m0.009937836696228261\u001b[39m,",
                                "  \u001b[33m0.4280930990507739\u001b[39m,",
                                "  \u001b[33m0.7117216763169125\u001b[39m,",
                                "  \u001b[33m0.43064775449771353\u001b[39m,",
                                "  \u001b[33m0.2166178556359343\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Train & Test Dataset"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const { sliceDataset } = require(\"./util/sliceDataset\");\r\n\r\nconst [xTrain, yTrain, xTest, yTest] = sliceDataset(xsDataset, ysDataset, 0.8);\r\n// const trainLen = Math.floor(xsDataset.length * 0.9)\r\n// const xTrain = xsDataset.slice(0, trainLen);\r\n// const yTrain = ysDataset.slice(0, trainLen);\r\n// const xTest = xsDataset.slice(trainLen);\r\n// const yTest = ysDataset.slice(trainLen);"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "# Model"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Input Shape"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const numberOfFeatures = xsDataset[0].length\r\nnumberOfFeatures"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m11\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Creation"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "let model;\r\ntry {\r\n  model = tf.sequential({\r\n    layers: [\r\n      tf.layers.dense({\r\n        units: 1,\r\n        name: \"inputLayer\",\r\n        inputShape: [numberOfFeatures]\r\n      }),\r\n      tf.layers.dense({ units: 50 }),\r\n      // tf.layers.dense({ units: 100 }),\r\n      // tf.layers.dense({ units: 10 }),\r\n      tf.layers.dense({ units: 1, name: \"outputLayer\" })\r\n    ]\r\n  });\r\n\r\n  model.compile({\r\n    optimizer: tf.train.adam(0.001),\r\n    // loss: tf.losses.meanSquaredError,\r\n    loss: tf.losses.absoluteDifference,\r\n    metrics: [\r\n      tf.losses.huberLoss,\r\n      // tf.losses.sigmoidCrossEntropy\r\n    ]\r\n  });\r\n} catch (e) {\r\n  console.error(e)\r\n}\r\nlet errors = [];\r\nlet trainCycles = 0;"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Training"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "try {\r\n  await model.fit(tf.tensor2d(xTrain), tf.tensor1d(yTrain), {\r\n    epochs: 100,\r\n    verbose: 0,\r\n    validationSplit: 0.8\r\n  });\r\n} catch (e) {\r\n  console.error(e)\r\n}\r\ntrainCycles += 1;"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m8\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Evaluate"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "let currentErrors = await model.evaluate(\r\n  tf.tensor2d(xTest),\r\n  tf.tensor1d(yTest)\r\n);\r\nif (Array.isArray(currentErrors)) {\r\n  const ce = await Promise.all(currentErrors.map((e) => e.array()));\r\n\r\n  const obj = ce.reduce((r, c, i) => ({ [i]: c, ...r }), { trainCycles });\r\n  errors.push(obj);\r\n} else {\r\n  errors.push({ trainCycles, 0: await currentErrors.array() });\r\n}\r\nfrom(errors.slice(-2))"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><table><thead><tr><th style=\"text-align: right;\">0</th><th style=\"text-align: right;\">1</th><th style=\"text-align: right;\">trainCycles</th></tr></thead><tbody><tr><td style=\"text-align: right;\">0.002992</td><td style=\"text-align: right;\">0.000005</td><td style=\"text-align: right;\">7</td></tr><tr><td style=\"text-align: right;\">0.000180</td><td style=\"text-align: right;\">2.477439e-8</td><td style=\"text-align: right;\">8</td></tr></tbody></table>"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "const { Plotly } = require(\"node-kernel\");\r\n\r\nconst xLabels = errors.map(({ trainCycles }) => trainCycles);\r\nconst plotData = Object.keys(errors[0])\r\n  .filter((key) => key !== \"trainCycles\")\r\n  .map((key) => ({\r\n    x: xLabels,\r\n    y: errors.map((error) => error[key]),\r\n    mode: \"lines+markers\",\r\n    type: \"scatter\",\r\n    name: `Metric #${key}`\r\n  }));\r\n\r\nPlotly.newPlot(\"myDiv\", plotData, {\r\n  title: \"Metrics vs Train Epoch x 100\",\r\n  height: 400,\r\n  width: 600,\r\n  showlegend: true\r\n});\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.ts.notebook.plotly+json",
                            "value": {
                                "requestId": "xe793d6721e1f49b58ddcc26069617fd8",
                                "type": "generatePlot",
                                "ele": "myDiv",
                                "data": [
                                    {
                                        "x": [
                                            1,
                                            2,
                                            3,
                                            4,
                                            5,
                                            6,
                                            7,
                                            8
                                        ],
                                        "y": [
                                            0.03291892260313034,
                                            0.023305650800466537,
                                            0.007332416716963053,
                                            0.002176896668970585,
                                            0.000542743771802634,
                                            0.0009561763727106154,
                                            0.0029924933332949877,
                                            0.00018005694437306374
                                        ],
                                        "mode": "lines+markers",
                                        "type": "scatter",
                                        "name": "Metric #0"
                                    },
                                    {
                                        "x": [
                                            1,
                                            2,
                                            3,
                                            4,
                                            5,
                                            6,
                                            7,
                                            8
                                        ],
                                        "y": [
                                            0.0023729654494673014,
                                            0.0012887503253296018,
                                            0.00011981748684775084,
                                            0.0000032392360935773468,
                                            2.1264484928451566e-7,
                                            7.307476153073367e-7,
                                            0.000004693917617260013,
                                            2.4774392315407567e-8
                                        ],
                                        "mode": "lines+markers",
                                        "type": "scatter",
                                        "name": "Metric #1"
                                    }
                                ],
                                "layout": {
                                    "title": "Metrics vs Train Epoch x 100",
                                    "height": 400,
                                    "width": 600,
                                    "showlegend": true
                                }
                            }
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Prediction"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const xTestIndex = 16;\r\nconst pred = await model\r\n  .predict(tf.tensor2d([xTest[xTestIndex]]))\r\n  .squeeze()\r\n  .array();\r\nconst meanError = errors.slice(-1)[0][0];\r\nconst { min: chargesMin, range: chargesRange } = normalizedMap.get('charges');\r\nconst round = (number, fixedDigits) => {\r\n  const divisor = Math.pow(10, fixedDigits);\r\n  return Math.round(number * divisor) / divisor;\r\n}\r\nconst convertCharges = charges => round(charges * chargesRange + chargesMin, 3);\r\n// console.log(\r\n  `range from ${convertCharges(Math.max(0, pred - meanError))} to ${convertCharges(\r\n    pred + meanError\r\n  )} with mean=${convertCharges(pred)} vs actual ${convertCharges(\r\n    yTest[xTestIndex]\r\n  )}`\r\n// );"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[32m'range from 2318.622 to 2341.183 with mean=2329.902 vs actual 2322.622'\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "xTest[3]"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[33m0.41404358353510895\u001b[39m,",
                                "  \u001b[33m0.2\u001b[39m,",
                                "  \u001b[33m0\u001b[39m,",
                                "  \u001b[33m1\u001b[39m,",
                                "  \u001b[33m0\u001b[39m,",
                                "  \u001b[33m1\u001b[39m,",
                                "  \u001b[33m0\u001b[39m,",
                                "  \u001b[33m0\u001b[39m,",
                                "  \u001b[33m0\u001b[39m,",
                                "  \u001b[33m1\u001b[39m,",
                                "  \u001b[33m22\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}