{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "# Regression"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Import Tensorflowjs"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "var tf = require(\"@tensorflow/tfjs-node\");\r\n\r\ntf.version;"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "{",
                                "  \u001b[32m'tfjs-core'\u001b[39m: \u001b[32m'3.13.0'\u001b[39m,",
                                "  \u001b[32m'tfjs-backend-cpu'\u001b[39m: \u001b[32m'3.13.0'\u001b[39m,",
                                "  \u001b[32m'tfjs-backend-webgl'\u001b[39m: \u001b[32m'3.13.0'\u001b[39m,",
                                "  \u001b[32m'tfjs-data'\u001b[39m: \u001b[32m'3.13.0'\u001b[39m,",
                                "  \u001b[32m'tfjs-layers'\u001b[39m: \u001b[32m'3.13.0'\u001b[39m,",
                                "  \u001b[32m'tfjs-converter'\u001b[39m: \u001b[32m'3.13.0'\u001b[39m,",
                                "  tfjs: \u001b[32m'3.13.0'\u001b[39m,",
                                "  \u001b[32m'tfjs-node'\u001b[39m: \u001b[32m'3.13.0'\u001b[39m",
                                "}"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "# Dataset"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Load Dataset"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const data = await tf.data.csv(\r\n  \"https://raw.githubusercontent.com/stedy/Machine-Learning-with-R-datasets/master/insurance.csv\"\r\n);"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Show Original Dataset"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const { from } = require(\"arquero\");\r\n\r\nfrom(await data.take(5).toArray())"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><table><thead><tr><th style=\"text-align: right;\">age</th><th style=\"text-align: left;\">sex</th><th style=\"text-align: right;\">bmi</th><th style=\"text-align: right;\">children</th><th style=\"text-align: left;\">smoker</th><th style=\"text-align: left;\">region</th><th style=\"text-align: right;\">charges</th></tr></thead><tbody><tr><td style=\"text-align: right;\">19</td><td style=\"text-align: left;\">female</td><td style=\"text-align: right;\">27.900</td><td style=\"text-align: right;\">0</td><td style=\"text-align: left;\">yes</td><td style=\"text-align: left;\">southwest</td><td style=\"text-align: right;\">16884.92400</td></tr><tr><td style=\"text-align: right;\">18</td><td style=\"text-align: left;\">male</td><td style=\"text-align: right;\">33.770</td><td style=\"text-align: right;\">1</td><td style=\"text-align: left;\">no</td><td style=\"text-align: left;\">southeast</td><td style=\"text-align: right;\">1725.55230</td></tr><tr><td style=\"text-align: right;\">28</td><td style=\"text-align: left;\">male</td><td style=\"text-align: right;\">33.000</td><td style=\"text-align: right;\">3</td><td style=\"text-align: left;\">no</td><td style=\"text-align: left;\">southeast</td><td style=\"text-align: right;\">4449.46200</td></tr><tr><td style=\"text-align: right;\">33</td><td style=\"text-align: left;\">male</td><td style=\"text-align: right;\">22.705</td><td style=\"text-align: right;\">0</td><td style=\"text-align: left;\">no</td><td style=\"text-align: left;\">northwest</td><td style=\"text-align: right;\">21984.47061</td></tr><tr><td style=\"text-align: right;\">32</td><td style=\"text-align: left;\">male</td><td style=\"text-align: right;\">28.880</td><td style=\"text-align: right;\">0</td><td style=\"text-align: left;\">no</td><td style=\"text-align: left;\">northwest</td><td style=\"text-align: right;\">3866.85520</td></tr></tbody></table>"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### One-Hot Encoding"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const oneHotData = await data.map(({ sex, smoker, region, ...rest }) => ({\r\n  sex_female: sex == 'female' ? 1 : 0,\r\n  sex_male: sex == 'male' ? 1 : 0,\r\n  smoker_yes: smoker == 'yes' ? 1 : 0,\r\n  smoker_no: smoker == 'no' ? 1 : 0,\r\n  region_se: region == 'southeast' ? 1 : 0,\r\n  region_sw: region == 'southwest' ? 1 : 0,\r\n  region_ne: region == 'northeast' ? 1 : 0,\r\n  region_nw: region == 'northwest' ? 1 : 0,\r\n  ...rest\r\n})).toArray();\r\nfrom(oneHotData.slice(0,5))"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><table><thead><tr><th style=\"text-align: right;\">sex_female</th><th style=\"text-align: right;\">sex_male</th><th style=\"text-align: right;\">smoker_yes</th><th style=\"text-align: right;\">smoker_no</th><th style=\"text-align: right;\">region_se</th><th style=\"text-align: right;\">region_sw</th><th style=\"text-align: right;\">region_ne</th><th style=\"text-align: right;\">region_nw</th><th style=\"text-align: right;\">age</th><th style=\"text-align: right;\">bmi</th><th style=\"text-align: right;\">children</th><th style=\"text-align: right;\">charges</th></tr></thead><tbody><tr><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">19</td><td style=\"text-align: right;\">27.900</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">16884.92400</td></tr><tr><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">18</td><td style=\"text-align: right;\">33.770</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">1725.55230</td></tr><tr><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">28</td><td style=\"text-align: right;\">33.000</td><td style=\"text-align: right;\">3</td><td style=\"text-align: right;\">4449.46200</td></tr><tr><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">33</td><td style=\"text-align: right;\">22.705</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">21984.47061</td></tr><tr><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">32</td><td style=\"text-align: right;\">28.880</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">3866.85520</td></tr></tbody></table>"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "const bmiMax = Math.max(...oneHotData.map(({ bmi }) => bmi));\r\nconst bmiMin = Math.min(...oneHotData.map(({ bmi }) => bmi));\r\nconst bmiRange = bmiMax - bmiMin;\r\n\r\nconst childrenMax = Math.max(...oneHotData.map(({ children }) => children));\r\n\r\nconst ageMax = Math.max(...oneHotData.map(({ age }) => age));\r\nconst ageMin = Math.min(...oneHotData.map(({ age }) => age));\r\nconst ageRange = ageMax - ageMin;\r\n\r\nconst chargesMax = Math.max(...oneHotData.map(({ charges }) => charges));\r\nconst chargesMin = Math.min(...oneHotData.map(({ charges }) => charges));\r\nconst chargesRange = chargesMax - chargesMin;\r\n\r\nconst prepData = oneHotData.map(({ bmi, children, age, charges, ...rest }) => ({\r\n  bmi: (bmi - bmiMin) / bmiRange,\r\n  children: children / childrenMax,\r\n  age: (age - ageMin) / ageRange,\r\n  charges: (charges - chargesMin) / chargesMax,\r\n  ...rest\r\n}));\r\nfrom(prepData.slice(0, 5));\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><table><thead><tr><th style=\"text-align: right;\">bmi</th><th style=\"text-align: right;\">children</th><th style=\"text-align: right;\">age</th><th style=\"text-align: right;\">charges</th><th style=\"text-align: right;\">sex_female</th><th style=\"text-align: right;\">sex_male</th><th style=\"text-align: right;\">smoker_yes</th><th style=\"text-align: right;\">smoker_no</th><th style=\"text-align: right;\">region_se</th><th style=\"text-align: right;\">region_sw</th><th style=\"text-align: right;\">region_ne</th><th style=\"text-align: right;\">region_nw</th></tr></thead><tbody><tr><td style=\"text-align: right;\">0.321227</td><td style=\"text-align: right;\">0.0</td><td style=\"text-align: right;\">0.021739</td><td style=\"text-align: right;\">0.247184</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">0.479150</td><td style=\"text-align: right;\">0.2</td><td style=\"text-align: right;\">0.000000</td><td style=\"text-align: right;\">0.009466</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">0.458434</td><td style=\"text-align: right;\">0.6</td><td style=\"text-align: right;\">0.217391</td><td style=\"text-align: right;\">0.052181</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">0.181464</td><td style=\"text-align: right;\">0.0</td><td style=\"text-align: right;\">0.326087</td><td style=\"text-align: right;\">0.327152</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td></tr><tr><td style=\"text-align: right;\">0.347592</td><td style=\"text-align: right;\">0.0</td><td style=\"text-align: right;\">0.304348</td><td style=\"text-align: right;\">0.043045</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td></tr></tbody></table>"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Prepare dataset"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const xsDataset = prepData.map((row) => {\r\n  const values = Object.values(row);\r\n  const xs = values.slice(0, -1);\r\n  return xs;\r\n});\r\n\r\nfrom(xsDataset.slice(0, 5));\r\n// xsDataset.slice(0,5)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><table><thead><tr><th style=\"text-align: right;\">0</th><th style=\"text-align: right;\">1</th><th style=\"text-align: right;\">2</th><th style=\"text-align: right;\">3</th><th style=\"text-align: right;\">4</th><th style=\"text-align: right;\">5</th><th style=\"text-align: right;\">6</th><th style=\"text-align: right;\">7</th><th style=\"text-align: right;\">8</th><th style=\"text-align: right;\">9</th><th style=\"text-align: right;\">10</th></tr></thead><tbody><tr><td style=\"text-align: right;\">0.321227</td><td style=\"text-align: right;\">0.0</td><td style=\"text-align: right;\">0.021739</td><td style=\"text-align: right;\">0.247184</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">0.479150</td><td style=\"text-align: right;\">0.2</td><td style=\"text-align: right;\">0.000000</td><td style=\"text-align: right;\">0.009466</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">0.458434</td><td style=\"text-align: right;\">0.6</td><td style=\"text-align: right;\">0.217391</td><td style=\"text-align: right;\">0.052181</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">0.181464</td><td style=\"text-align: right;\">0.0</td><td style=\"text-align: right;\">0.326087</td><td style=\"text-align: right;\">0.327152</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">0.347592</td><td style=\"text-align: right;\">0.0</td><td style=\"text-align: right;\">0.304348</td><td style=\"text-align: right;\">0.043045</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td></tr></tbody></table>"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "const ysDataset = prepData.map(({charges}) => charges);\r\n\r\nysDataset.slice(0,5)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[33m0.2471843233909008\u001b[39m,",
                                "  \u001b[33m0.009466431680611202\u001b[39m,",
                                "  \u001b[33m0.0521807396286911\u001b[39m,",
                                "  \u001b[33m0.3271515867312116\u001b[39m,",
                                "  \u001b[33m0.043044736967573\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Shuffle Dataset"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "tf.util.shuffleCombo(xsDataset, ysDataset);\r\nfrom(xsDataset.slice(0,5))"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><table><thead><tr><th style=\"text-align: right;\">0</th><th style=\"text-align: right;\">1</th><th style=\"text-align: right;\">2</th><th style=\"text-align: right;\">3</th><th style=\"text-align: right;\">4</th><th style=\"text-align: right;\">5</th><th style=\"text-align: right;\">6</th><th style=\"text-align: right;\">7</th><th style=\"text-align: right;\">8</th><th style=\"text-align: right;\">9</th><th style=\"text-align: right;\">10</th></tr></thead><tbody><tr><td style=\"text-align: right;\">0.215765</td><td style=\"text-align: right;\">0.6</td><td style=\"text-align: right;\">0.217391</td><td style=\"text-align: right;\">0.259388</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">0.528383</td><td style=\"text-align: right;\">0.0</td><td style=\"text-align: right;\">0.086957</td><td style=\"text-align: right;\">0.540434</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">0.189131</td><td style=\"text-align: right;\">0.4</td><td style=\"text-align: right;\">0.260870</td><td style=\"text-align: right;\">0.254662</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">0.322034</td><td style=\"text-align: right;\">0.6</td><td style=\"text-align: right;\">0.021739</td><td style=\"text-align: right;\">0.277822</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">0.644875</td><td style=\"text-align: right;\">0.0</td><td style=\"text-align: right;\">0.956522</td><td style=\"text-align: right;\">0.185995</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td></tr></tbody></table>"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "ysDataset.slice(0,5)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[33m0.25938778860643874\u001b[39m,",
                                "  \u001b[33m0.5404339154599317\u001b[39m,",
                                "  \u001b[33m0.2546618033903329\u001b[39m,",
                                "  \u001b[33m0.27782202994186866\u001b[39m,",
                                "  \u001b[33m0.1859953142879964\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Train & Test Dataset"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const trainLen = Math.floor(xsDataset.length * 0.9)\r\nconst xTrain = xsDataset.slice(0, trainLen);\r\nconst yTrain = ysDataset.slice(0, trainLen);\r\nconst xTest = xsDataset.slice(trainLen);\r\nconst yTest = ysDataset.slice(trainLen);"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "# Model"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Input Shape"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const numberOfFeatures = xsDataset[0].length\r\nnumberOfFeatures"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m11\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Creation"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "let model;\r\ntry {\r\n  model = tf.sequential({\r\n    layers: [\r\n      tf.layers.dense({\r\n        units: 1,\r\n        name: \"inputLayer\",\r\n        inputShape: [numberOfFeatures]\r\n      }),\r\n      tf.layers.dense({ units: 50 }),\r\n      // tf.layers.dense({ units: 100 }),\r\n      // tf.layers.dense({ units: 10 }),\r\n      tf.layers.dense({ units: 1, name: \"outputLayer\" })\r\n    ]\r\n  });\r\n\r\n  model.compile({\r\n    optimizer: tf.train.adam(0.001),\r\n    // loss: tf.losses.meanSquaredError,\r\n    loss: tf.losses.absoluteDifference,\r\n    metrics: [\r\n      tf.losses.huberLoss,\r\n      // tf.losses.sigmoidCrossEntropy\r\n    ]\r\n  });\r\n} catch (e) {\r\n  console.error(e)\r\n}\r\nlet errors = [];\r\nlet trainCycles = 0;"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Training"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "try {\r\n  await model.fit(tf.tensor2d(xTrain), tf.tensor1d(yTrain), {\r\n    epochs: 100,\r\n    verbose: 0,\r\n    validationSplit: 0.8\r\n  });\r\n} catch (e) {\r\n  console.error(e)\r\n}\r\ntrainCycles += 1;"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m5\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Evaluate"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "let currentErrors = await model.evaluate(\r\n  tf.tensor2d(xTest),\r\n  tf.tensor1d(yTest)\r\n);\r\nif (Array.isArray(currentErrors)) {\r\n  const ce = await Promise.all(currentErrors.map((e) => e.array()));\r\n\r\n  const obj = ce.reduce((r, c, i) => ({ [i]: c, ...r }), { trainCycles });\r\n  errors.push(obj);\r\n} else {\r\n  errors.push({ trainCycles, 0: await currentErrors.array() });\r\n}\r\nfrom(errors.slice(-2))"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><table><thead><tr><th style=\"text-align: right;\">0</th><th style=\"text-align: right;\">1</th><th style=\"text-align: right;\">2</th><th style=\"text-align: right;\">trainCycles</th></tr></thead><tbody><tr><td style=\"text-align: right;\">0.001211</td><td style=\"text-align: right;\">0.000001</td><td style=\"text-align: right;\">0.728884</td><td style=\"text-align: right;\">5</td></tr><tr><td style=\"text-align: right;\">0.001211</td><td style=\"text-align: right;\">0.000001</td><td style=\"text-align: right;\">0.728884</td><td style=\"text-align: right;\">5</td></tr></tbody></table>"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "const { Plotly } = require(\"node-kernel\");\r\n\r\nconst xLabels = errors.map(({ trainCycles }) => trainCycles);\r\nconst plotData = Object.keys(errors[0])\r\n  .filter((key) => key !== \"trainCycles\")\r\n  .map((key) => ({\r\n    x: xLabels,\r\n    y: errors.map((error) => error[key]),\r\n    mode: \"lines+markers\",\r\n    type: \"scatter\",\r\n    name: `Error ${key}`\r\n  }));\r\n\r\nPlotly.newPlot(\"myDiv\", plotData, {\r\n  title: \"Error vs Train Epoch x 100\",\r\n  height: 400,\r\n  width: 600,\r\n  showlegend: true\r\n});\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.ts.notebook.plotly+json",
                            "value": {
                                "requestId": "xfb012000ab9047bcaf3e5958b81d12d5",
                                "type": "generatePlot",
                                "ele": "myDiv",
                                "data": [
                                    {
                                        "x": [
                                            1,
                                            2,
                                            3,
                                            4,
                                            5,
                                            5
                                        ],
                                        "y": [
                                            0.014613160863518715,
                                            0.0016886241501197219,
                                            0.0007274310337379575,
                                            0.001502665807493031,
                                            0.001211371854878962,
                                            0.001211371854878962
                                        ],
                                        "mode": "lines+markers",
                                        "type": "scatter",
                                        "name": "Error 0"
                                    },
                                    {
                                        "x": [
                                            1,
                                            2,
                                            3,
                                            4,
                                            5,
                                            5
                                        ],
                                        "y": [
                                            0.00038285093614831567,
                                            0.0000017352800796288648,
                                            3.675146729165135e-7,
                                            0.0000012368689112918219,
                                            0.0000010024457424151478,
                                            0.0000010024457424151478
                                        ],
                                        "mode": "lines+markers",
                                        "type": "scatter",
                                        "name": "Error 1"
                                    },
                                    {
                                        "x": [
                                            1,
                                            2,
                                            3,
                                            4,
                                            5,
                                            5
                                        ],
                                        "y": [
                                            0.7313457131385803,
                                            0.7286279201507568,
                                            0.7294641733169556,
                                            0.729714572429657,
                                            0.7288840413093567,
                                            0.7288840413093567
                                        ],
                                        "mode": "lines+markers",
                                        "type": "scatter",
                                        "name": "Error 2"
                                    }
                                ],
                                "layout": {
                                    "title": "Error vs Train Epoch x 100",
                                    "height": 400,
                                    "width": 600,
                                    "showlegend": true
                                }
                            }
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Prediction"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const xTestIndex = 0;\r\nconst pred = await model\r\n  .predict(tf.tensor2d([xTest[xTestIndex]]))\r\n  .squeeze()\r\n  .array();\r\nconst meanError = errors.slice(-1)[0][0];\r\nconst convertCharges = charges => charges * chargesRange + chargesMin;\r\nconsole.log(`from ${convertCharges(Math.max(0,pred - meanError))} to ${convertCharges(pred + meanError)} with mean=${convertCharges(pred)}`);\r\nconvertCharges(yTest[xTestIndex]);"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "from 35235.15590697389 to 35386.93729736932 with mean=35311.046602171606",
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m35470.13038371798\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "xTest[3]"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[33m0.41404358353510895\u001b[39m,",
                                "  \u001b[33m0.2\u001b[39m,",
                                "  \u001b[33m0\u001b[39m,",
                                "  \u001b[33m1\u001b[39m,",
                                "  \u001b[33m0\u001b[39m,",
                                "  \u001b[33m1\u001b[39m,",
                                "  \u001b[33m0\u001b[39m,",
                                "  \u001b[33m0\u001b[39m,",
                                "  \u001b[33m0\u001b[39m,",
                                "  \u001b[33m1\u001b[39m,",
                                "  \u001b[33m22\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}