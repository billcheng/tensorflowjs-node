{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "# Classification"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Intro"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "| Hyperparameters | Binary Classification | Multilabel Binary Classification | Multiclass classification |\r\n|-|-|-|-|\r\n| Input shape | Same as # of features | Same as # of features | Same as # of features |\r\n| Hidden layers | Problem specific, minimum = 1, max = unlimited | Sames as binary classification | Sames as binary classification |\r\n| # neurons per hidden layer | Problem specific, generally 10 to 100 | Sames as binary classification | Same as binary classification |\r\n| Hidden activation | Usually ReLU | Usually ReLU | Usually ReLU |\r\n| Output shape | 1 | 1 per label | 1 per class |\r\n| Output layer activation | sigmoid | sigmoid | softmax |\r\n| Loss function | Cross entropy | Cross entropy | Cross entropy |\r\n| Optimizer | SGD, Adam | SGD, Adam | SGD, Adam |\r\n| Learning rate| Adam 1e-4 | Adam 1e-4 | Adam 1e-4 |\r\n\r\nUse the hyperparameters above as a starting point."
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Import Tensorflow"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "var tf = require(\"@tensorflow/tfjs-node\");\r\n\r\ntf.version"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stderr",
                            "value": [
                                "2022-01-23 00:56:31.104600: I tensorflow/core/platform/cpu_feature_guard.cc:151] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2\r",
                                "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\r",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "{",
                                "  \u001b[32m'tfjs-core'\u001b[39m: \u001b[32m'3.13.0'\u001b[39m,",
                                "  \u001b[32m'tfjs-backend-cpu'\u001b[39m: \u001b[32m'3.13.0'\u001b[39m,",
                                "  \u001b[32m'tfjs-backend-webgl'\u001b[39m: \u001b[32m'3.13.0'\u001b[39m,",
                                "  \u001b[32m'tfjs-data'\u001b[39m: \u001b[32m'3.13.0'\u001b[39m,",
                                "  \u001b[32m'tfjs-layers'\u001b[39m: \u001b[32m'3.13.0'\u001b[39m,",
                                "  \u001b[32m'tfjs-converter'\u001b[39m: \u001b[32m'3.13.0'\u001b[39m,",
                                "  tfjs: \u001b[32m'3.13.0'\u001b[39m,",
                                "  \u001b[32m'tfjs-node'\u001b[39m: \u001b[32m'3.13.0'\u001b[39m",
                                "}"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Dataset"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Load dataset"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const { loadCSV } = require(\"arquero\");\r\n\r\nconst data = await loadCSV(\r\n  \"https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.csv\",\r\n  {\r\n    header: false\r\n  }\r\n);\r\n\r\ndata.slice(0, 5);\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><table><thead><tr><th style=\"text-align: right;\">col1</th><th style=\"text-align: right;\">col2</th><th style=\"text-align: right;\">col3</th><th style=\"text-align: right;\">col4</th><th style=\"text-align: right;\">col5</th><th style=\"text-align: right;\">col6</th><th style=\"text-align: right;\">col7</th><th style=\"text-align: right;\">col8</th><th style=\"text-align: right;\">col9</th></tr></thead><tbody><tr><td style=\"text-align: right;\">6</td><td style=\"text-align: right;\">148</td><td style=\"text-align: right;\">72</td><td style=\"text-align: right;\">35</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">33.6</td><td style=\"text-align: right;\">0.627</td><td style=\"text-align: right;\">50</td><td style=\"text-align: right;\">1</td></tr><tr><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">85</td><td style=\"text-align: right;\">66</td><td style=\"text-align: right;\">29</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">26.6</td><td style=\"text-align: right;\">0.351</td><td style=\"text-align: right;\">31</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">8</td><td style=\"text-align: right;\">183</td><td style=\"text-align: right;\">64</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">23.3</td><td style=\"text-align: right;\">0.672</td><td style=\"text-align: right;\">32</td><td style=\"text-align: right;\">1</td></tr><tr><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">89</td><td style=\"text-align: right;\">66</td><td style=\"text-align: right;\">23</td><td style=\"text-align: right;\">94</td><td style=\"text-align: right;\">28.1</td><td style=\"text-align: right;\">0.167</td><td style=\"text-align: right;\">21</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">137</td><td style=\"text-align: right;\">40</td><td style=\"text-align: right;\">35</td><td style=\"text-align: right;\">168</td><td style=\"text-align: right;\">43.1</td><td style=\"text-align: right;\">2.288</td><td style=\"text-align: right;\">33</td><td style=\"text-align: right;\">1</td></tr></tbody></table>"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Normalize"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const { getNormalizedMap, normalize } = require(\"./util/normalize\");\r\nconst { from } = require(\"arquero\");\r\nconst { oneHot } = require(\"./util/oneHot\");\r\n\r\nconst rows = data.objects();\r\nconst columnNames = Object.keys(rows[0]).slice(0, -1);\r\n\r\nconst oneHotRows = oneHot(rows, [\"col9\"]);\r\n\r\nconst normalizedMap = getNormalizedMap(oneHotRows, columnNames);\r\nconst normalizedRows = normalize(oneHotRows, columnNames, normalizedMap);\r\n// const normalizedRows = rows;\r\n\r\nfrom(normalizedRows.slice(0, 5));"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><table><thead><tr><th style=\"text-align: right;\">col1</th><th style=\"text-align: right;\">col2</th><th style=\"text-align: right;\">col3</th><th style=\"text-align: right;\">col4</th><th style=\"text-align: right;\">col5</th><th style=\"text-align: right;\">col6</th><th style=\"text-align: right;\">col7</th><th style=\"text-align: right;\">col8</th><th style=\"text-align: right;\">col9_1</th><th style=\"text-align: right;\">col9_0</th></tr></thead><tbody><tr><td style=\"text-align: right;\">0.352941</td><td style=\"text-align: right;\">0.743719</td><td style=\"text-align: right;\">0.590164</td><td style=\"text-align: right;\">0.353535</td><td style=\"text-align: right;\">0.000000</td><td style=\"text-align: right;\">0.500745</td><td style=\"text-align: right;\">0.234415</td><td style=\"text-align: right;\">0.483333</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">0.058824</td><td style=\"text-align: right;\">0.427136</td><td style=\"text-align: right;\">0.540984</td><td style=\"text-align: right;\">0.292929</td><td style=\"text-align: right;\">0.000000</td><td style=\"text-align: right;\">0.396423</td><td style=\"text-align: right;\">0.116567</td><td style=\"text-align: right;\">0.166667</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td></tr><tr><td style=\"text-align: right;\">0.470588</td><td style=\"text-align: right;\">0.919598</td><td style=\"text-align: right;\">0.524590</td><td style=\"text-align: right;\">0.000000</td><td style=\"text-align: right;\">0.000000</td><td style=\"text-align: right;\">0.347243</td><td style=\"text-align: right;\">0.253629</td><td style=\"text-align: right;\">0.183333</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">0.058824</td><td style=\"text-align: right;\">0.447236</td><td style=\"text-align: right;\">0.540984</td><td style=\"text-align: right;\">0.232323</td><td style=\"text-align: right;\">0.111111</td><td style=\"text-align: right;\">0.418778</td><td style=\"text-align: right;\">0.038002</td><td style=\"text-align: right;\">0.000000</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td></tr><tr><td style=\"text-align: right;\">0.000000</td><td style=\"text-align: right;\">0.688442</td><td style=\"text-align: right;\">0.327869</td><td style=\"text-align: right;\">0.353535</td><td style=\"text-align: right;\">0.198582</td><td style=\"text-align: right;\">0.642325</td><td style=\"text-align: right;\">0.943638</td><td style=\"text-align: right;\">0.200000</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td></tr></tbody></table>"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Shuffle"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "tf.util.shuffle(normalizedRows);\r\nfrom(normalizedRows.slice(0, 5));"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><table><thead><tr><th style=\"text-align: right;\">col1</th><th style=\"text-align: right;\">col2</th><th style=\"text-align: right;\">col3</th><th style=\"text-align: right;\">col4</th><th style=\"text-align: right;\">col5</th><th style=\"text-align: right;\">col6</th><th style=\"text-align: right;\">col7</th><th style=\"text-align: right;\">col8</th><th style=\"text-align: right;\">col9_1</th><th style=\"text-align: right;\">col9_0</th></tr></thead><tbody><tr><td style=\"text-align: right;\">0.117647</td><td style=\"text-align: right;\">0.989950</td><td style=\"text-align: right;\">0.573770</td><td style=\"text-align: right;\">0.454545</td><td style=\"text-align: right;\">0.641844</td><td style=\"text-align: right;\">0.454545</td><td style=\"text-align: right;\">0.034159</td><td style=\"text-align: right;\">0.533333</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">0.470588</td><td style=\"text-align: right;\">0.773869</td><td style=\"text-align: right;\">0.639344</td><td style=\"text-align: right;\">0.323232</td><td style=\"text-align: right;\">0.000000</td><td style=\"text-align: right;\">0.482861</td><td style=\"text-align: right;\">0.155850</td><td style=\"text-align: right;\">0.400000</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">0.235294</td><td style=\"text-align: right;\">0.587940</td><td style=\"text-align: right;\">0.508197</td><td style=\"text-align: right;\">0.121212</td><td style=\"text-align: right;\">0.000000</td><td style=\"text-align: right;\">0.442623</td><td style=\"text-align: right;\">0.128950</td><td style=\"text-align: right;\">0.150000</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">0.176471</td><td style=\"text-align: right;\">0.869347</td><td style=\"text-align: right;\">0.688525</td><td style=\"text-align: right;\">0.333333</td><td style=\"text-align: right;\">0.560284</td><td style=\"text-align: right;\">0.532042</td><td style=\"text-align: right;\">0.076857</td><td style=\"text-align: right;\">0.016667</td><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">0.294118</td><td style=\"text-align: right;\">0.366834</td><td style=\"text-align: right;\">0.491803</td><td style=\"text-align: right;\">0.000000</td><td style=\"text-align: right;\">0.000000</td><td style=\"text-align: right;\">0.399404</td><td style=\"text-align: right;\">0.081127</td><td style=\"text-align: right;\">0.100000</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">1</td></tr></tbody></table>"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Split features and labels"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const xs = normalizedRows.map((row) => Object.values(row).slice(0, -2));\r\nfrom(xs.slice(0, 5));"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><table><thead><tr><th style=\"text-align: right;\">0</th><th style=\"text-align: right;\">1</th><th style=\"text-align: right;\">2</th><th style=\"text-align: right;\">3</th><th style=\"text-align: right;\">4</th><th style=\"text-align: right;\">5</th><th style=\"text-align: right;\">6</th><th style=\"text-align: right;\">7</th></tr></thead><tbody><tr><td style=\"text-align: right;\">0.117647</td><td style=\"text-align: right;\">0.989950</td><td style=\"text-align: right;\">0.573770</td><td style=\"text-align: right;\">0.454545</td><td style=\"text-align: right;\">0.641844</td><td style=\"text-align: right;\">0.454545</td><td style=\"text-align: right;\">0.034159</td><td style=\"text-align: right;\">0.533333</td></tr><tr><td style=\"text-align: right;\">0.470588</td><td style=\"text-align: right;\">0.773869</td><td style=\"text-align: right;\">0.639344</td><td style=\"text-align: right;\">0.323232</td><td style=\"text-align: right;\">0.000000</td><td style=\"text-align: right;\">0.482861</td><td style=\"text-align: right;\">0.155850</td><td style=\"text-align: right;\">0.400000</td></tr><tr><td style=\"text-align: right;\">0.235294</td><td style=\"text-align: right;\">0.587940</td><td style=\"text-align: right;\">0.508197</td><td style=\"text-align: right;\">0.121212</td><td style=\"text-align: right;\">0.000000</td><td style=\"text-align: right;\">0.442623</td><td style=\"text-align: right;\">0.128950</td><td style=\"text-align: right;\">0.150000</td></tr><tr><td style=\"text-align: right;\">0.176471</td><td style=\"text-align: right;\">0.869347</td><td style=\"text-align: right;\">0.688525</td><td style=\"text-align: right;\">0.333333</td><td style=\"text-align: right;\">0.560284</td><td style=\"text-align: right;\">0.532042</td><td style=\"text-align: right;\">0.076857</td><td style=\"text-align: right;\">0.016667</td></tr><tr><td style=\"text-align: right;\">0.294118</td><td style=\"text-align: right;\">0.366834</td><td style=\"text-align: right;\">0.491803</td><td style=\"text-align: right;\">0.000000</td><td style=\"text-align: right;\">0.000000</td><td style=\"text-align: right;\">0.399404</td><td style=\"text-align: right;\">0.081127</td><td style=\"text-align: right;\">0.100000</td></tr></tbody></table>"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "const ys = normalizedRows.map(row => Object.values(row).slice(-2));\r\nys.slice(0,5)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  [",
                                "    \u001b[33m1\u001b[39m,",
                                "    \u001b[33m0\u001b[39m",
                                "  ],",
                                "  [",
                                "    \u001b[33m1\u001b[39m,",
                                "    \u001b[33m0\u001b[39m",
                                "  ],",
                                "  [",
                                "    \u001b[33m1\u001b[39m,",
                                "    \u001b[33m0\u001b[39m",
                                "  ],",
                                "  [",
                                "    \u001b[33m1\u001b[39m,",
                                "    \u001b[33m0\u001b[39m",
                                "  ],",
                                "  [",
                                "    \u001b[33m0\u001b[39m,",
                                "    \u001b[33m1\u001b[39m",
                                "  ]",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Train and Test Dataset"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const { sliceDataset } = require('./util/sliceDataset');\r\n\r\nconst [xTrain, yTrain, xTest, yTest] = sliceDataset(xs, ys, 0.8);"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "from(xTrain.slice(0,5))"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><table><thead><tr><th style=\"text-align: right;\">0</th><th style=\"text-align: right;\">1</th><th style=\"text-align: right;\">2</th><th style=\"text-align: right;\">3</th><th style=\"text-align: right;\">4</th><th style=\"text-align: right;\">5</th><th style=\"text-align: right;\">6</th><th style=\"text-align: right;\">7</th></tr></thead><tbody><tr><td style=\"text-align: right;\">0.117647</td><td style=\"text-align: right;\">0.989950</td><td style=\"text-align: right;\">0.573770</td><td style=\"text-align: right;\">0.454545</td><td style=\"text-align: right;\">0.641844</td><td style=\"text-align: right;\">0.454545</td><td style=\"text-align: right;\">0.034159</td><td style=\"text-align: right;\">0.533333</td></tr><tr><td style=\"text-align: right;\">0.470588</td><td style=\"text-align: right;\">0.773869</td><td style=\"text-align: right;\">0.639344</td><td style=\"text-align: right;\">0.323232</td><td style=\"text-align: right;\">0.000000</td><td style=\"text-align: right;\">0.482861</td><td style=\"text-align: right;\">0.155850</td><td style=\"text-align: right;\">0.400000</td></tr><tr><td style=\"text-align: right;\">0.235294</td><td style=\"text-align: right;\">0.587940</td><td style=\"text-align: right;\">0.508197</td><td style=\"text-align: right;\">0.121212</td><td style=\"text-align: right;\">0.000000</td><td style=\"text-align: right;\">0.442623</td><td style=\"text-align: right;\">0.128950</td><td style=\"text-align: right;\">0.150000</td></tr><tr><td style=\"text-align: right;\">0.176471</td><td style=\"text-align: right;\">0.869347</td><td style=\"text-align: right;\">0.688525</td><td style=\"text-align: right;\">0.333333</td><td style=\"text-align: right;\">0.560284</td><td style=\"text-align: right;\">0.532042</td><td style=\"text-align: right;\">0.076857</td><td style=\"text-align: right;\">0.016667</td></tr><tr><td style=\"text-align: right;\">0.294118</td><td style=\"text-align: right;\">0.366834</td><td style=\"text-align: right;\">0.491803</td><td style=\"text-align: right;\">0.000000</td><td style=\"text-align: right;\">0.000000</td><td style=\"text-align: right;\">0.399404</td><td style=\"text-align: right;\">0.081127</td><td style=\"text-align: right;\">0.100000</td></tr></tbody></table>"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "yTrain.slice(0,5)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  [",
                                "    \u001b[33m1\u001b[39m,",
                                "    \u001b[33m0\u001b[39m",
                                "  ],",
                                "  [",
                                "    \u001b[33m1\u001b[39m,",
                                "    \u001b[33m0\u001b[39m",
                                "  ],",
                                "  [",
                                "    \u001b[33m1\u001b[39m,",
                                "    \u001b[33m0\u001b[39m",
                                "  ],",
                                "  [",
                                "    \u001b[33m1\u001b[39m,",
                                "    \u001b[33m0\u001b[39m",
                                "  ],",
                                "  [",
                                "    \u001b[33m0\u001b[39m,",
                                "    \u001b[33m1\u001b[39m",
                                "  ]",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "const yTrainCount = yTrain.reduce((r, [c1]) => (r += Math.max(0,c1)), 0);\r\nconst ysCount = ys.reduce((r, [c1]) => (r += Math.max(0,c1)), 0);\r\n\r\nconsole.log(`${yTrainCount}/${ysCount}  ${100*yTrainCount/ysCount}%`);"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "208/268  77.61194029850746%",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Model"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Create Model"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const numberOfFeatures = xs[0].length;\r\nconst errors = [];\r\nlet cycle = 0;\r\n\r\nconst model = tf.sequential({\r\n  layers: [\r\n    tf.layers.dense({\r\n      units: 6,\r\n      name: \"inputLayer\",\r\n      activation: \"relu\",\r\n      inputShape: [numberOfFeatures]\r\n    }),\r\n    // tf.layers.dense({ units: 16, activation: \"relu\" }),\r\n    tf.layers.dense({ units: 2, activation: \"softmax\", name: \"outputLayer\" })\r\n  ]\r\n});\r\n\r\nmodel.compile({\r\n  optimizer: tf.train.adam(0.001),\r\n  // optimizer: tf.train.sgd(0.01),\r\n  loss: tf.losses.softmaxCrossEntropy,\r\n  metrics: [\"accuracy\"]\r\n});\r\n\r\nnumberOfFeatures;"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m8\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Training"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "try {\r\n  cycle += 1;\r\n  const trainResult = await model.fit(tf.tensor2d(xTrain), tf.tensor2d(yTrain), {\r\n    epochs: 100,\r\n    verbose: 0,\r\n    // shuffle: true,\r\n    // validationSplit: 0.1\r\n  });\r\n} catch (e) {\r\n  console.error(e)\r\n}"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Evaluate"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const currentErrors = await model.evaluate(\r\n  tf.tensor2d(xTest),\r\n  tf.tensor2d(yTest)\r\n);\r\nif (Array.isArray(currentErrors)) {\r\n  const ce = await Promise.all(currentErrors.map((e) => e.array()));\r\n\r\n  const obj = ce.reduce((r, c, i) => ({ [i]: c, ...r }), { cycle });\r\n  errors.push(obj);\r\n} else {\r\n  errors.push({ cycle, 0: await currentErrors.array() });\r\n}\r\nfrom(errors.slice(-2));\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><table><thead><tr><th style=\"text-align: right;\">0</th><th style=\"text-align: right;\">1</th><th style=\"text-align: right;\">cycle</th></tr></thead><tbody><tr><td style=\"text-align: right;\">0.585745</td><td style=\"text-align: right;\">0.668831</td><td style=\"text-align: right;\">1</td></tr></tbody></table>"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "const { Plotly } = require(\"node-kernel\");\r\n\r\nconst xLabels = errors.map(({ cycle }) => cycle);\r\nconst plotData = Object.keys(errors[0])\r\n  .filter((key) => key !== \"cycle\")\r\n  .map((key) => ({\r\n    x: xLabels,\r\n    y: errors.map((error) => error[key]),\r\n    mode: \"lines+markers\",\r\n    type: \"scatter\",\r\n    name: `Metric #${key}`\r\n  }));\r\n\r\nPlotly.newPlot(\"myDiv\", plotData, {\r\n  title: \"Metrics vs Train Epoch x 100\",\r\n  height: 400,\r\n  width: 600,\r\n  showlegend: true\r\n});\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.ts.notebook.plotly+json",
                            "value": {
                                "requestId": "xbfdecbc7d36246e485beacd9644eee5a",
                                "type": "generatePlot",
                                "ele": "myDiv",
                                "data": [
                                    {
                                        "x": [
                                            1,
                                            2,
                                            3,
                                            4,
                                            5
                                        ],
                                        "y": [
                                            -0.28234797716140747,
                                            -0.4082781672477722,
                                            -0.4462427496910095,
                                            -0.4551856219768524,
                                            -0.4590561091899872
                                        ],
                                        "mode": "lines+markers",
                                        "type": "scatter",
                                        "name": "Metric #0"
                                    },
                                    {
                                        "x": [
                                            1,
                                            2,
                                            3,
                                            4,
                                            5
                                        ],
                                        "y": [
                                            0.649350643157959,
                                            0.7402597665786743,
                                            0.7272727489471436,
                                            0.7402597665786743,
                                            0.7337662577629089
                                        ],
                                        "mode": "lines+markers",
                                        "type": "scatter",
                                        "name": "Metric #1"
                                    }
                                ],
                                "layout": {
                                    "title": "Metrics vs Train Epoch x 100",
                                    "height": 400,
                                    "width": 600,
                                    "showlegend": true
                                }
                            }
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Prediction"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const testIndex = 0;\r\nconst pred = await model\r\n  .predict(tf.tensor2d([xTest[testIndex]]))\r\n  .squeeze()\r\n  .round()\r\n  .array();\r\n`${JSON.stringify(xTest[testIndex])} => [${pred}] vs [${yTest[testIndex]}]`"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[32m'[0,0.8994974874371859,0.4098360655737705,0.36363636363636365,0.1879432624113475,0.5633383010432191,0.1609735269000854,0.016666666666666666] => [1,0] vs [1,-1]'\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}