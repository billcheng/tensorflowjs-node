{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "# Classification"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Intro"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "| Hyperparameters | Binary Classification | Multilabel Binary Classification | Multiclass classification |\r\n|-|-|-|-|\r\n| Input shape | Same as # of features | Same as # of features | Same as # of features |\r\n| Hidden layers | Problem specific, minimum = 1, max = unlimited | Sames as binary classification | Sames as binary classification |\r\n| # neurons per hidden layer | Problem specific, generally 10 to 100 | Sames as binary classification | Same as binary classification |\r\n| Hidden activation | Usually ReLU | Usually ReLU | Usually ReLU |\r\n| Output shape | 1 | 1 per label | 1 per class |\r\n| Output layer activation | sigmoid | sigmoid | softmax |\r\n| Loss function | Cross entropy | Cross entropy | Cross entropy |\r\n| Optimizer | SGD, Adam | SGD, Adam | SGD, Adam |\r\n| Learning rate| Adam 3e-4 | Adam 3e-4 | Adam 3e-4 |\r\n\r\nUse the hyperparameters above as a starting point."
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Import Tensorflow"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "var tf = require(\"@tensorflow/tfjs-node\");\r\n\r\ntf.version"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stderr",
                            "value": [
                                "2022-01-22 17:39:51.882409: I tensorflow/core/platform/cpu_feature_guard.cc:151] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2\r",
                                "To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.\r",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "{",
                                "  \u001b[32m'tfjs-core'\u001b[39m: \u001b[32m'3.13.0'\u001b[39m,",
                                "  \u001b[32m'tfjs-backend-cpu'\u001b[39m: \u001b[32m'3.13.0'\u001b[39m,",
                                "  \u001b[32m'tfjs-backend-webgl'\u001b[39m: \u001b[32m'3.13.0'\u001b[39m,",
                                "  \u001b[32m'tfjs-data'\u001b[39m: \u001b[32m'3.13.0'\u001b[39m,",
                                "  \u001b[32m'tfjs-layers'\u001b[39m: \u001b[32m'3.13.0'\u001b[39m,",
                                "  \u001b[32m'tfjs-converter'\u001b[39m: \u001b[32m'3.13.0'\u001b[39m,",
                                "  tfjs: \u001b[32m'3.13.0'\u001b[39m,",
                                "  \u001b[32m'tfjs-node'\u001b[39m: \u001b[32m'3.13.0'\u001b[39m",
                                "}"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Dataset"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Load dataset"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const { loadCSV } = require(\"arquero\");\r\n\r\nconst data = await loadCSV(\r\n  \"https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.csv\",\r\n  {\r\n    header: false\r\n  }\r\n);\r\n\r\ndata.slice(0, 5);\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><table><thead><tr><th style=\"text-align: right;\">col1</th><th style=\"text-align: right;\">col2</th><th style=\"text-align: right;\">col3</th><th style=\"text-align: right;\">col4</th><th style=\"text-align: right;\">col5</th><th style=\"text-align: right;\">col6</th><th style=\"text-align: right;\">col7</th><th style=\"text-align: right;\">col8</th><th style=\"text-align: right;\">col9</th></tr></thead><tbody><tr><td style=\"text-align: right;\">6</td><td style=\"text-align: right;\">148</td><td style=\"text-align: right;\">72</td><td style=\"text-align: right;\">35</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">33.6</td><td style=\"text-align: right;\">0.627</td><td style=\"text-align: right;\">50</td><td style=\"text-align: right;\">1</td></tr><tr><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">85</td><td style=\"text-align: right;\">66</td><td style=\"text-align: right;\">29</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">26.6</td><td style=\"text-align: right;\">0.351</td><td style=\"text-align: right;\">31</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">8</td><td style=\"text-align: right;\">183</td><td style=\"text-align: right;\">64</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">23.3</td><td style=\"text-align: right;\">0.672</td><td style=\"text-align: right;\">32</td><td style=\"text-align: right;\">1</td></tr><tr><td style=\"text-align: right;\">1</td><td style=\"text-align: right;\">89</td><td style=\"text-align: right;\">66</td><td style=\"text-align: right;\">23</td><td style=\"text-align: right;\">94</td><td style=\"text-align: right;\">28.1</td><td style=\"text-align: right;\">0.167</td><td style=\"text-align: right;\">21</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">0</td><td style=\"text-align: right;\">137</td><td style=\"text-align: right;\">40</td><td style=\"text-align: right;\">35</td><td style=\"text-align: right;\">168</td><td style=\"text-align: right;\">43.1</td><td style=\"text-align: right;\">2.288</td><td style=\"text-align: right;\">33</td><td style=\"text-align: right;\">1</td></tr></tbody></table>"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Normalize"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const { getNormalizedMap, normalize } = require(\"./util/normalize\");\r\nconst { from } = require(\"arquero\");\r\n\r\nconst rows = data.objects();\r\nconst columnNames = Object.keys(rows[0]);\r\n\r\nconst normalizedMap = getNormalizedMap(rows, columnNames);\r\nconst normalizedRows = normalize(rows, columnNames, normalizedMap);\r\n// const normalizedRows = rows;\r\n\r\nfrom(normalizedRows.slice(0, 5));"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><table><thead><tr><th style=\"text-align: right;\">col1</th><th style=\"text-align: right;\">col2</th><th style=\"text-align: right;\">col3</th><th style=\"text-align: right;\">col4</th><th style=\"text-align: right;\">col5</th><th style=\"text-align: right;\">col6</th><th style=\"text-align: right;\">col7</th><th style=\"text-align: right;\">col8</th><th style=\"text-align: right;\">col9</th></tr></thead><tbody><tr><td style=\"text-align: right;\">0.352941</td><td style=\"text-align: right;\">0.743719</td><td style=\"text-align: right;\">0.590164</td><td style=\"text-align: right;\">0.353535</td><td style=\"text-align: right;\">0.000000</td><td style=\"text-align: right;\">0.500745</td><td style=\"text-align: right;\">0.234415</td><td style=\"text-align: right;\">0.483333</td><td style=\"text-align: right;\">1</td></tr><tr><td style=\"text-align: right;\">0.058824</td><td style=\"text-align: right;\">0.427136</td><td style=\"text-align: right;\">0.540984</td><td style=\"text-align: right;\">0.292929</td><td style=\"text-align: right;\">0.000000</td><td style=\"text-align: right;\">0.396423</td><td style=\"text-align: right;\">0.116567</td><td style=\"text-align: right;\">0.166667</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">0.470588</td><td style=\"text-align: right;\">0.919598</td><td style=\"text-align: right;\">0.524590</td><td style=\"text-align: right;\">0.000000</td><td style=\"text-align: right;\">0.000000</td><td style=\"text-align: right;\">0.347243</td><td style=\"text-align: right;\">0.253629</td><td style=\"text-align: right;\">0.183333</td><td style=\"text-align: right;\">1</td></tr><tr><td style=\"text-align: right;\">0.058824</td><td style=\"text-align: right;\">0.447236</td><td style=\"text-align: right;\">0.540984</td><td style=\"text-align: right;\">0.232323</td><td style=\"text-align: right;\">0.111111</td><td style=\"text-align: right;\">0.418778</td><td style=\"text-align: right;\">0.038002</td><td style=\"text-align: right;\">0.000000</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">0.000000</td><td style=\"text-align: right;\">0.688442</td><td style=\"text-align: right;\">0.327869</td><td style=\"text-align: right;\">0.353535</td><td style=\"text-align: right;\">0.198582</td><td style=\"text-align: right;\">0.642325</td><td style=\"text-align: right;\">0.943638</td><td style=\"text-align: right;\">0.200000</td><td style=\"text-align: right;\">1</td></tr></tbody></table>"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Shuffle"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "tf.util.shuffle(normalizedRows);\r\nfrom(normalizedRows.slice(0, 5));"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><table><thead><tr><th style=\"text-align: right;\">col1</th><th style=\"text-align: right;\">col2</th><th style=\"text-align: right;\">col3</th><th style=\"text-align: right;\">col4</th><th style=\"text-align: right;\">col5</th><th style=\"text-align: right;\">col6</th><th style=\"text-align: right;\">col7</th><th style=\"text-align: right;\">col8</th><th style=\"text-align: right;\">col9</th></tr></thead><tbody><tr><td style=\"text-align: right;\">0.176471</td><td style=\"text-align: right;\">0.618090</td><td style=\"text-align: right;\">0.819672</td><td style=\"text-align: right;\">0.353535</td><td style=\"text-align: right;\">0.283688</td><td style=\"text-align: right;\">0.853949</td><td style=\"text-align: right;\">0.342442</td><td style=\"text-align: right;\">0.016667</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">0.235294</td><td style=\"text-align: right;\">0.618090</td><td style=\"text-align: right;\">0.508197</td><td style=\"text-align: right;\">0.000000</td><td style=\"text-align: right;\">0.000000</td><td style=\"text-align: right;\">0.476900</td><td style=\"text-align: right;\">0.063194</td><td style=\"text-align: right;\">0.233333</td><td style=\"text-align: right;\">1</td></tr><tr><td style=\"text-align: right;\">0.117647</td><td style=\"text-align: right;\">0.407035</td><td style=\"text-align: right;\">0.590164</td><td style=\"text-align: right;\">0.151515</td><td style=\"text-align: right;\">0.089835</td><td style=\"text-align: right;\">0.448584</td><td style=\"text-align: right;\">0.200256</td><td style=\"text-align: right;\">0.066667</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">0.294118</td><td style=\"text-align: right;\">0.527638</td><td style=\"text-align: right;\">0.590164</td><td style=\"text-align: right;\">0.292929</td><td style=\"text-align: right;\">0.384161</td><td style=\"text-align: right;\">0.549925</td><td style=\"text-align: right;\">0.034586</td><td style=\"text-align: right;\">0.116667</td><td style=\"text-align: right;\">0</td></tr><tr><td style=\"text-align: right;\">0.058824</td><td style=\"text-align: right;\">0.547739</td><td style=\"text-align: right;\">0.311475</td><td style=\"text-align: right;\">0.181818</td><td style=\"text-align: right;\">0.141844</td><td style=\"text-align: right;\">0.344262</td><td style=\"text-align: right;\">0.140478</td><td style=\"text-align: right;\">0.083333</td><td style=\"text-align: right;\">0</td></tr></tbody></table>"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Split features and labels"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const xs = normalizedRows.map((row) => Object.values(row).slice(0, -1));\r\nfrom(xs.slice(0, 5));"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><table><thead><tr><th style=\"text-align: right;\">0</th><th style=\"text-align: right;\">1</th><th style=\"text-align: right;\">2</th><th style=\"text-align: right;\">3</th><th style=\"text-align: right;\">4</th><th style=\"text-align: right;\">5</th><th style=\"text-align: right;\">6</th><th style=\"text-align: right;\">7</th></tr></thead><tbody><tr><td style=\"text-align: right;\">0.176471</td><td style=\"text-align: right;\">0.618090</td><td style=\"text-align: right;\">0.819672</td><td style=\"text-align: right;\">0.353535</td><td style=\"text-align: right;\">0.283688</td><td style=\"text-align: right;\">0.853949</td><td style=\"text-align: right;\">0.342442</td><td style=\"text-align: right;\">0.016667</td></tr><tr><td style=\"text-align: right;\">0.235294</td><td style=\"text-align: right;\">0.618090</td><td style=\"text-align: right;\">0.508197</td><td style=\"text-align: right;\">0.000000</td><td style=\"text-align: right;\">0.000000</td><td style=\"text-align: right;\">0.476900</td><td style=\"text-align: right;\">0.063194</td><td style=\"text-align: right;\">0.233333</td></tr><tr><td style=\"text-align: right;\">0.117647</td><td style=\"text-align: right;\">0.407035</td><td style=\"text-align: right;\">0.590164</td><td style=\"text-align: right;\">0.151515</td><td style=\"text-align: right;\">0.089835</td><td style=\"text-align: right;\">0.448584</td><td style=\"text-align: right;\">0.200256</td><td style=\"text-align: right;\">0.066667</td></tr><tr><td style=\"text-align: right;\">0.294118</td><td style=\"text-align: right;\">0.527638</td><td style=\"text-align: right;\">0.590164</td><td style=\"text-align: right;\">0.292929</td><td style=\"text-align: right;\">0.384161</td><td style=\"text-align: right;\">0.549925</td><td style=\"text-align: right;\">0.034586</td><td style=\"text-align: right;\">0.116667</td></tr><tr><td style=\"text-align: right;\">0.058824</td><td style=\"text-align: right;\">0.547739</td><td style=\"text-align: right;\">0.311475</td><td style=\"text-align: right;\">0.181818</td><td style=\"text-align: right;\">0.141844</td><td style=\"text-align: right;\">0.344262</td><td style=\"text-align: right;\">0.140478</td><td style=\"text-align: right;\">0.083333</td></tr></tbody></table>"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "const ys = normalizedRows.map(row => Object.values(row).slice(-1)[0]);\r\nys.slice(0,5)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[33m0\u001b[39m,",
                                "  \u001b[33m1\u001b[39m,",
                                "  \u001b[33m0\u001b[39m,",
                                "  \u001b[33m0\u001b[39m,",
                                "  \u001b[33m0\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Train and Test Dataset"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const { sliceDataset } = require('./util/sliceDataset');\r\n\r\nconst [xTrain, yTrain, xTest, yTest] = sliceDataset(xs, ys, 0.8);"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "from(xTrain.slice(0,5))"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><table><thead><tr><th style=\"text-align: right;\">0</th><th style=\"text-align: right;\">1</th><th style=\"text-align: right;\">2</th><th style=\"text-align: right;\">3</th><th style=\"text-align: right;\">4</th><th style=\"text-align: right;\">5</th><th style=\"text-align: right;\">6</th><th style=\"text-align: right;\">7</th></tr></thead><tbody><tr><td style=\"text-align: right;\">0.117647</td><td style=\"text-align: right;\">0.497487</td><td style=\"text-align: right;\">0.491803</td><td style=\"text-align: right;\">0.171717</td><td style=\"text-align: right;\">0.189125</td><td style=\"text-align: right;\">0.545455</td><td style=\"text-align: right;\">0.160120</td><td style=\"text-align: right;\">0.000000</td></tr><tr><td style=\"text-align: right;\">0.000000</td><td style=\"text-align: right;\">0.587940</td><td style=\"text-align: right;\">0.540984</td><td style=\"text-align: right;\">0.313131</td><td style=\"text-align: right;\">0.222222</td><td style=\"text-align: right;\">0.459016</td><td style=\"text-align: right;\">0.177199</td><td style=\"text-align: right;\">0.016667</td></tr><tr><td style=\"text-align: right;\">0.058824</td><td style=\"text-align: right;\">0.597990</td><td style=\"text-align: right;\">0.704918</td><td style=\"text-align: right;\">0.393939</td><td style=\"text-align: right;\">0.260047</td><td style=\"text-align: right;\">0.679583</td><td style=\"text-align: right;\">0.311699</td><td style=\"text-align: right;\">0.133333</td></tr><tr><td style=\"text-align: right;\">0.117647</td><td style=\"text-align: right;\">0.648241</td><td style=\"text-align: right;\">0.606557</td><td style=\"text-align: right;\">0.262626</td><td style=\"text-align: right;\">0.242317</td><td style=\"text-align: right;\">0.494784</td><td style=\"text-align: right;\">0.219044</td><td style=\"text-align: right;\">0.066667</td></tr><tr><td style=\"text-align: right;\">0.705882</td><td style=\"text-align: right;\">0.462312</td><td style=\"text-align: right;\">0.508197</td><td style=\"text-align: right;\">0.070707</td><td style=\"text-align: right;\">0.304965</td><td style=\"text-align: right;\">0.411326</td><td style=\"text-align: right;\">0.362084</td><td style=\"text-align: right;\">0.383333</td></tr></tbody></table>"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "yTrain.slice(0,5)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "[",
                                "  \u001b[33m0\u001b[39m,",
                                "  \u001b[33m0\u001b[39m,",
                                "  \u001b[33m1\u001b[39m,",
                                "  \u001b[33m0\u001b[39m,",
                                "  \u001b[33m0\u001b[39m",
                                "]"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "const yTrainCount = yTrain.reduce((r, c) => (r += c), 0);\r\nconst ysCount = ys.reduce((r, c) => (r += c), 0);\r\n\r\nconsole.log(`${yTrainCount}/${ysCount}  ${100*yTrainCount/ysCount}%`);"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "217/268  80.97014925373135%",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Model"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "### Create Model"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const numberOfFeatures = xs[0].length;\r\nconst errors = [];\r\nlet cycle = 0;\r\n\r\nconst model = tf.sequential({\r\n  layers: [\r\n    tf.layers.dense({\r\n      units: 100,\r\n      name: \"inputLayer\",\r\n      activation: \"relu\",\r\n      inputShape: [numberOfFeatures]\r\n    }),\r\n    // tf.layers.dense({ units: 16, activation: \"relu\" }),\r\n    tf.layers.dense({ units: 1, activation: \"sigmoid\", name: \"outputLayer\" })\r\n  ]\r\n});\r\n\r\nmodel.compile({\r\n  optimizer: tf.train.adam(0.001),\r\n  // optimizer: tf.train.sgd(0.01),\r\n  loss: tf.losses.logLoss,\r\n  metrics: [\"accuracy\"]\r\n});\r\n\r\nnumberOfFeatures;"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m8\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Training"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "cycle += 1;\r\nconst trainResult = await model.fit(tf.tensor2d(xTrain), tf.tensor1d(yTrain), {\r\n  epochs: 100,\r\n  verbose: 0,\r\n  // shuffle: true,\r\n  // validationSplit: 0.9\r\n});\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "### Evaluate"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const currentErrors = await model.evaluate(\r\n  tf.tensor2d(xTest),\r\n  tf.tensor1d(yTest)\r\n);\r\nif (Array.isArray(currentErrors)) {\r\n  const ce = await Promise.all(currentErrors.map((e) => e.array()));\r\n\r\n  const obj = ce.reduce((r, c, i) => ({ [i]: c, ...r }), { cycle });\r\n  errors.push(obj);\r\n} else {\r\n  errors.push({ cycle, 0: await currentErrors.array() });\r\n}\r\nfrom(errors.slice(-2));\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/html",
                            "value": [
                                "<style> table, th, tr { text-align: left; }</style><table><thead><tr><th style=\"text-align: right;\">0</th><th style=\"text-align: right;\">1</th><th style=\"text-align: right;\">cycle</th></tr></thead><tbody><tr><td style=\"text-align: right;\">0.458519</td><td style=\"text-align: right;\">0.779221</td><td style=\"text-align: right;\">2</td></tr><tr><td style=\"text-align: right;\">0.455843</td><td style=\"text-align: right;\">0.785714</td><td style=\"text-align: right;\">3</td></tr></tbody></table>"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "const { Plotly } = require(\"node-kernel\");\r\n\r\nconst xLabels = errors.map(({ cycle }) => cycle);\r\nconst plotData = Object.keys(errors[0])\r\n  .filter((key) => key !== \"cycle\")\r\n  .map((key) => ({\r\n    x: xLabels,\r\n    y: errors.map((error) => error[key]),\r\n    mode: \"lines+markers\",\r\n    type: \"scatter\",\r\n    name: `Metric #${key}`\r\n  }));\r\n\r\nPlotly.newPlot(\"myDiv\", plotData, {\r\n  title: \"Metrics vs Train Epoch x 100\",\r\n  height: 400,\r\n  width: 600,\r\n  showlegend: true\r\n});\r\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.ts.notebook.plotly+json",
                            "value": {
                                "requestId": "x480c90b47014460697662d2743cd01f9",
                                "type": "generatePlot",
                                "ele": "myDiv",
                                "data": [
                                    {
                                        "x": [
                                            1,
                                            2,
                                            3,
                                            4,
                                            5,
                                            6,
                                            7,
                                            8,
                                            9,
                                            10,
                                            11,
                                            12,
                                            13,
                                            14,
                                            15,
                                            16,
                                            17,
                                            18,
                                            19,
                                            20,
                                            21,
                                            22,
                                            23,
                                            24,
                                            25,
                                            26,
                                            27,
                                            28,
                                            29,
                                            30,
                                            31,
                                            32,
                                            33,
                                            34,
                                            35,
                                            36,
                                            37,
                                            38,
                                            39,
                                            40,
                                            41,
                                            42,
                                            43
                                        ],
                                        "y": [
                                            0.5895272493362427,
                                            0.5405356287956238,
                                            0.5110521912574768,
                                            0.4967571198940277,
                                            0.4879448115825653,
                                            0.48322197794914246,
                                            0.47872504591941833,
                                            0.4773850739002228,
                                            0.4748179018497467,
                                            0.4740975499153137,
                                            0.47327953577041626,
                                            0.4724022150039673,
                                            0.47041112184524536,
                                            0.47064873576164246,
                                            0.46841147541999817,
                                            0.4674515128135681,
                                            0.46749863028526306,
                                            0.46596696972846985,
                                            0.4654366672039032,
                                            0.46438679099082947,
                                            0.46481403708457947,
                                            0.4656701385974884,
                                            0.46567386388778687,
                                            0.46543553471565247,
                                            0.4652475118637085,
                                            0.4659271240234375,
                                            0.46504145860671997,
                                            0.46561896800994873,
                                            0.46521180868148804,
                                            0.4648575186729431,
                                            0.46552732586860657,
                                            0.4660587012767792,
                                            0.4661846458911896,
                                            0.4666236340999603,
                                            0.4660329818725586,
                                            0.46646320819854736,
                                            0.4674679636955261,
                                            0.46561095118522644,
                                            0.4654668867588043,
                                            0.4646282494068146,
                                            0.4657087028026581,
                                            0.46534207463264465,
                                            0.4653180241584778
                                        ],
                                        "mode": "lines+markers",
                                        "type": "scatter",
                                        "name": "Metric #0"
                                    },
                                    {
                                        "x": [
                                            1,
                                            2,
                                            3,
                                            4,
                                            5,
                                            6,
                                            7,
                                            8,
                                            9,
                                            10,
                                            11,
                                            12,
                                            13,
                                            14,
                                            15,
                                            16,
                                            17,
                                            18,
                                            19,
                                            20,
                                            21,
                                            22,
                                            23,
                                            24,
                                            25,
                                            26,
                                            27,
                                            28,
                                            29,
                                            30,
                                            31,
                                            32,
                                            33,
                                            34,
                                            35,
                                            36,
                                            37,
                                            38,
                                            39,
                                            40,
                                            41,
                                            42,
                                            43
                                        ],
                                        "y": [
                                            0.6818181872367859,
                                            0.7077922224998474,
                                            0.7337662577629089,
                                            0.7402597665786743,
                                            0.7402597665786743,
                                            0.7662337422370911,
                                            0.7597402334213257,
                                            0.7662337422370911,
                                            0.7662337422370911,
                                            0.7597402334213257,
                                            0.7662337422370911,
                                            0.7597402334213257,
                                            0.7467532753944397,
                                            0.7857142686843872,
                                            0.7662337422370911,
                                            0.7727272510528564,
                                            0.7597402334213257,
                                            0.7662337422370911,
                                            0.7792207598686218,
                                            0.7727272510528564,
                                            0.7792207598686218,
                                            0.7727272510528564,
                                            0.7857142686843872,
                                            0.7792207598686218,
                                            0.7922077775001526,
                                            0.7727272510528564,
                                            0.7792207598686218,
                                            0.7792207598686218,
                                            0.7857142686843872,
                                            0.7792207598686218,
                                            0.7857142686843872,
                                            0.7727272510528564,
                                            0.7727272510528564,
                                            0.7857142686843872,
                                            0.7792207598686218,
                                            0.7857142686843872,
                                            0.7792207598686218,
                                            0.7792207598686218,
                                            0.7792207598686218,
                                            0.7922077775001526,
                                            0.7792207598686218,
                                            0.7792207598686218,
                                            0.7922077775001526
                                        ],
                                        "mode": "lines+markers",
                                        "type": "scatter",
                                        "name": "Metric #1"
                                    }
                                ],
                                "layout": {
                                    "title": "Metrics vs Train Epoch x 100",
                                    "height": 400,
                                    "width": 600,
                                    "showlegend": true
                                }
                            }
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Prediction"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "const testIndex = 0;\r\nconst pred = await model\r\n  .predict(tf.tensor2d([xTest[testIndex]]))\r\n  .squeeze()\r\n  .array();\r\n`${JSON.stringify(xTest[testIndex])} => ${pred} vs ${yTest[testIndex]}`"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[32m'[0.058823529411764705,0.7688442211055276,0.6721311475409836,0.42424242424242425,0.5732860520094563,0.6050670640834576,0.26003415883859954,0.03333333333333333] => 0.44233840703964233 vs 0'\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}